from pathlib import Path


def collect_files(collection_dir: Path):
    return [
        entry
        for entry in collection_dir.rglob('**')
        if entry.is_file() and entry.suffix in ['.json']
    ]


# Define rules for adding indexes to models based on field names
# Update as needed for new queries
MODEL_INDEX_RULES = {
    'inv_positions': ["models.Index(fields=['item_id'])"],
}

MODEL_PRIMARY_KEY_ID_OVERRIDE = {
    'inv_items': 'item_id',
    'inv_flags': 'flag_id',
    'inv_names': 'item_id',
    'inv_positions': 'item_id',
    'inv_unique_names': 'item_id',
    'sta_stations': 'station_id',
    'stars': 'id',
}

MODEL_TEMPLATE = """
{% autoescape off %}
from django.db import models


class {{model_name}}(models.Model):
    {% for field_name, field_type in fields.items %}
    {{ field_name }} = {{ field_type }}{% endfor %}

    {% if indexes %}class Meta:
        indexes = [
            {% for index in indexes %}{{ index }},{% endfor %}
        ]
    {% endif %}
{% endautoescape %}

"""

INIT_MODEL_TEMPLATE = """
{% autoescape off %}
# Automatically generated by sde_gen_models management command
{% for model_file in imports %}
{{ model_file }}
{% endfor %}

__all__ = [
    {% for model in models %}'{{ model }}',{% endfor %}
]
{% endautoescape %}

"""
